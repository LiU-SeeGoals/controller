// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ssl_detection.proto

package ssl_vision

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SSL_DetectionBall struct {
	// Confidence in [0-1] of the detection
	Confidence *float32 `protobuf:"fixed32,1,req,name=confidence" json:"confidence,omitempty"`
	Area       *uint32  `protobuf:"varint,2,opt,name=area" json:"area,omitempty"`
	// X-coordinate in [mm] in global ssl-vision coordinate system
	X *float32 `protobuf:"fixed32,3,req,name=x" json:"x,omitempty"`
	// Y-coordinate in [mm] in global ssl-vision coordinate system
	Y *float32 `protobuf:"fixed32,4,req,name=y" json:"y,omitempty"`
	// Z-coordinate in [mm] in global ssl-vision coordinate system
	// Not supported by ssl-vision, but might be set by simulators
	Z *float32 `protobuf:"fixed32,5,opt,name=z" json:"z,omitempty"`
	// X-coordinate in [pixel] in the image
	PixelX *float32 `protobuf:"fixed32,6,req,name=pixel_x,json=pixelX" json:"pixel_x,omitempty"`
	// Y-coordinate in [pixel] in the image
	PixelY               *float32 `protobuf:"fixed32,7,req,name=pixel_y,json=pixelY" json:"pixel_y,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SSL_DetectionBall) Reset()         { *m = SSL_DetectionBall{} }
func (m *SSL_DetectionBall) String() string { return proto.CompactTextString(m) }
func (*SSL_DetectionBall) ProtoMessage()    {}
func (*SSL_DetectionBall) Descriptor() ([]byte, []int) {
	return fileDescriptor_49c0795b9ee6d900, []int{0}
}

func (m *SSL_DetectionBall) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SSL_DetectionBall.Unmarshal(m, b)
}
func (m *SSL_DetectionBall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SSL_DetectionBall.Marshal(b, m, deterministic)
}
func (m *SSL_DetectionBall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSL_DetectionBall.Merge(m, src)
}
func (m *SSL_DetectionBall) XXX_Size() int {
	return xxx_messageInfo_SSL_DetectionBall.Size(m)
}
func (m *SSL_DetectionBall) XXX_DiscardUnknown() {
	xxx_messageInfo_SSL_DetectionBall.DiscardUnknown(m)
}

var xxx_messageInfo_SSL_DetectionBall proto.InternalMessageInfo

func (m *SSL_DetectionBall) GetConfidence() float32 {
	if m != nil && m.Confidence != nil {
		return *m.Confidence
	}
	return 0
}

func (m *SSL_DetectionBall) GetArea() uint32 {
	if m != nil && m.Area != nil {
		return *m.Area
	}
	return 0
}

func (m *SSL_DetectionBall) GetX() float32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *SSL_DetectionBall) GetY() float32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

func (m *SSL_DetectionBall) GetZ() float32 {
	if m != nil && m.Z != nil {
		return *m.Z
	}
	return 0
}

func (m *SSL_DetectionBall) GetPixelX() float32 {
	if m != nil && m.PixelX != nil {
		return *m.PixelX
	}
	return 0
}

func (m *SSL_DetectionBall) GetPixelY() float32 {
	if m != nil && m.PixelY != nil {
		return *m.PixelY
	}
	return 0
}

type SSL_DetectionRobot struct {
	// Confidence in [0-1] of the detection
	Confidence *float32 `protobuf:"fixed32,1,req,name=confidence" json:"confidence,omitempty"`
	// Id of the robot
	RobotId *uint32 `protobuf:"varint,2,opt,name=robot_id,json=robotId" json:"robot_id,omitempty"`
	// X-coordinate in [mm] in global ssl-vision coordinate system
	X *float32 `protobuf:"fixed32,3,req,name=x" json:"x,omitempty"`
	// Y-coordinate in [mm] in global ssl-vision coordinate system
	Y *float32 `protobuf:"fixed32,4,req,name=y" json:"y,omitempty"`
	// Orientation in [rad]
	Orientation *float32 `protobuf:"fixed32,5,opt,name=orientation" json:"orientation,omitempty"`
	// X-coordinate in [pixel] in the image
	PixelX *float32 `protobuf:"fixed32,6,req,name=pixel_x,json=pixelX" json:"pixel_x,omitempty"`
	// Y-coordinate in [pixel] in the image
	PixelY *float32 `protobuf:"fixed32,7,req,name=pixel_y,json=pixelY" json:"pixel_y,omitempty"`
	// Height, as configured in ssl-vision for the respective team
	Height               *float32 `protobuf:"fixed32,8,opt,name=height" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SSL_DetectionRobot) Reset()         { *m = SSL_DetectionRobot{} }
func (m *SSL_DetectionRobot) String() string { return proto.CompactTextString(m) }
func (*SSL_DetectionRobot) ProtoMessage()    {}
func (*SSL_DetectionRobot) Descriptor() ([]byte, []int) {
	return fileDescriptor_49c0795b9ee6d900, []int{1}
}

func (m *SSL_DetectionRobot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SSL_DetectionRobot.Unmarshal(m, b)
}
func (m *SSL_DetectionRobot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SSL_DetectionRobot.Marshal(b, m, deterministic)
}
func (m *SSL_DetectionRobot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSL_DetectionRobot.Merge(m, src)
}
func (m *SSL_DetectionRobot) XXX_Size() int {
	return xxx_messageInfo_SSL_DetectionRobot.Size(m)
}
func (m *SSL_DetectionRobot) XXX_DiscardUnknown() {
	xxx_messageInfo_SSL_DetectionRobot.DiscardUnknown(m)
}

var xxx_messageInfo_SSL_DetectionRobot proto.InternalMessageInfo

func (m *SSL_DetectionRobot) GetConfidence() float32 {
	if m != nil && m.Confidence != nil {
		return *m.Confidence
	}
	return 0
}

func (m *SSL_DetectionRobot) GetRobotId() uint32 {
	if m != nil && m.RobotId != nil {
		return *m.RobotId
	}
	return 0
}

func (m *SSL_DetectionRobot) GetX() float32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *SSL_DetectionRobot) GetY() float32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

func (m *SSL_DetectionRobot) GetOrientation() float32 {
	if m != nil && m.Orientation != nil {
		return *m.Orientation
	}
	return 0
}

func (m *SSL_DetectionRobot) GetPixelX() float32 {
	if m != nil && m.PixelX != nil {
		return *m.PixelX
	}
	return 0
}

func (m *SSL_DetectionRobot) GetPixelY() float32 {
	if m != nil && m.PixelY != nil {
		return *m.PixelY
	}
	return 0
}

func (m *SSL_DetectionRobot) GetHeight() float32 {
	if m != nil && m.Height != nil {
		return *m.Height
	}
	return 0
}

type SSL_DetectionFrame struct {
	// monotonously increasing frame number
	FrameNumber *uint32 `protobuf:"varint,1,req,name=frame_number,json=frameNumber" json:"frame_number,omitempty"`
	// Unix timestamp in [seconds] at which the image has been received by ssl-vision
	TCapture *float64 `protobuf:"fixed64,2,req,name=t_capture,json=tCapture" json:"t_capture,omitempty"`
	// Unix timestamp in [seconds] at which this message has been sent to the network
	TSent *float64 `protobuf:"fixed64,3,req,name=t_sent,json=tSent" json:"t_sent,omitempty"`
	// Camera timestamp in [seconds] as reported by the camera, if supported
	// This is not necessarily a unix timestamp
	TCaptureCamera *float64 `protobuf:"fixed64,8,opt,name=t_capture_camera,json=tCaptureCamera" json:"t_capture_camera,omitempty"`
	// Identifier of the camera
	CameraId *uint32 `protobuf:"varint,4,req,name=camera_id,json=cameraId" json:"camera_id,omitempty"`
	// Detected balls
	Balls []*SSL_DetectionBall `protobuf:"bytes,5,rep,name=balls" json:"balls,omitempty"`
	// Detected yellow robots
	RobotsYellow []*SSL_DetectionRobot `protobuf:"bytes,6,rep,name=robots_yellow,json=robotsYellow" json:"robots_yellow,omitempty"`
	// Detected blue robots
	RobotsBlue           []*SSL_DetectionRobot `protobuf:"bytes,7,rep,name=robots_blue,json=robotsBlue" json:"robots_blue,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SSL_DetectionFrame) Reset()         { *m = SSL_DetectionFrame{} }
func (m *SSL_DetectionFrame) String() string { return proto.CompactTextString(m) }
func (*SSL_DetectionFrame) ProtoMessage()    {}
func (*SSL_DetectionFrame) Descriptor() ([]byte, []int) {
	return fileDescriptor_49c0795b9ee6d900, []int{2}
}

func (m *SSL_DetectionFrame) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SSL_DetectionFrame.Unmarshal(m, b)
}
func (m *SSL_DetectionFrame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SSL_DetectionFrame.Marshal(b, m, deterministic)
}
func (m *SSL_DetectionFrame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSL_DetectionFrame.Merge(m, src)
}
func (m *SSL_DetectionFrame) XXX_Size() int {
	return xxx_messageInfo_SSL_DetectionFrame.Size(m)
}
func (m *SSL_DetectionFrame) XXX_DiscardUnknown() {
	xxx_messageInfo_SSL_DetectionFrame.DiscardUnknown(m)
}

var xxx_messageInfo_SSL_DetectionFrame proto.InternalMessageInfo

func (m *SSL_DetectionFrame) GetFrameNumber() uint32 {
	if m != nil && m.FrameNumber != nil {
		return *m.FrameNumber
	}
	return 0
}

func (m *SSL_DetectionFrame) GetTCapture() float64 {
	if m != nil && m.TCapture != nil {
		return *m.TCapture
	}
	return 0
}

func (m *SSL_DetectionFrame) GetTSent() float64 {
	if m != nil && m.TSent != nil {
		return *m.TSent
	}
	return 0
}

func (m *SSL_DetectionFrame) GetTCaptureCamera() float64 {
	if m != nil && m.TCaptureCamera != nil {
		return *m.TCaptureCamera
	}
	return 0
}

func (m *SSL_DetectionFrame) GetCameraId() uint32 {
	if m != nil && m.CameraId != nil {
		return *m.CameraId
	}
	return 0
}

func (m *SSL_DetectionFrame) GetBalls() []*SSL_DetectionBall {
	if m != nil {
		return m.Balls
	}
	return nil
}

func (m *SSL_DetectionFrame) GetRobotsYellow() []*SSL_DetectionRobot {
	if m != nil {
		return m.RobotsYellow
	}
	return nil
}

func (m *SSL_DetectionFrame) GetRobotsBlue() []*SSL_DetectionRobot {
	if m != nil {
		return m.RobotsBlue
	}
	return nil
}

func init() {
	proto.RegisterType((*SSL_DetectionBall)(nil), "SSL_DetectionBall")
	proto.RegisterType((*SSL_DetectionRobot)(nil), "SSL_DetectionRobot")
	proto.RegisterType((*SSL_DetectionFrame)(nil), "SSL_DetectionFrame")
}

func init() { proto.RegisterFile("ssl_detection.proto", fileDescriptor_49c0795b9ee6d900) }

var fileDescriptor_49c0795b9ee6d900 = []byte{
	// 397 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xc1, 0x6e, 0x13, 0x31,
	0x14, 0x94, 0xb7, 0xc9, 0x26, 0xbc, 0x24, 0x08, 0x5c, 0x01, 0x46, 0x48, 0x68, 0xc9, 0x69, 0x4f,
	0x39, 0x20, 0x0e, 0x9c, 0x53, 0x84, 0x54, 0x09, 0x71, 0x70, 0x2e, 0x94, 0x8b, 0xe5, 0xec, 0xbe,
	0x52, 0x4b, 0x8e, 0x1d, 0x79, 0x1d, 0xd8, 0xed, 0xef, 0xf0, 0x3b, 0xdc, 0xf9, 0x1d, 0xe4, 0xb7,
	0x5b, 0x08, 0x54, 0x80, 0x7a, 0xf3, 0xcc, 0x9b, 0xb1, 0x67, 0x6c, 0xc3, 0x69, 0xd3, 0x58, 0x55,
	0x63, 0xc4, 0x2a, 0x1a, 0xef, 0x56, 0xfb, 0xe0, 0xa3, 0x5f, 0x7e, 0x65, 0xf0, 0x70, 0xb3, 0x79,
	0xa7, 0xde, 0xdc, 0xf0, 0x6b, 0x6d, 0x2d, 0x7f, 0x0e, 0x50, 0x79, 0x77, 0x69, 0x6a, 0x74, 0x15,
	0x0a, 0x56, 0x64, 0x65, 0x26, 0x8f, 0x18, 0xce, 0x61, 0xa4, 0x03, 0x6a, 0x91, 0x15, 0xac, 0x5c,
	0x48, 0x5a, 0xf3, 0x39, 0xb0, 0x56, 0x9c, 0x90, 0x94, 0xb5, 0x09, 0x75, 0x62, 0xd4, 0xa3, 0x2e,
	0xa1, 0x6b, 0x31, 0x2e, 0x58, 0x42, 0xd7, 0xfc, 0x09, 0x4c, 0xf6, 0xa6, 0x45, 0xab, 0x5a, 0x91,
	0x93, 0x22, 0x27, 0xf8, 0xe1, 0xd7, 0xa0, 0x13, 0x93, 0xa3, 0xc1, 0xc5, 0xf2, 0x3b, 0x03, 0xfe,
	0x5b, 0x4a, 0xe9, 0xb7, 0x3e, 0xfe, 0x37, 0xe6, 0x53, 0x98, 0x86, 0x24, 0x54, 0xa6, 0x1e, 0xa2,
	0x4e, 0x08, 0x9f, 0xd7, 0xff, 0x4c, 0x5b, 0xc0, 0xcc, 0x07, 0x83, 0x2e, 0xea, 0x74, 0xd4, 0x90,
	0xfb, 0x98, 0xba, 0x7b, 0x03, 0xfe, 0x18, 0xf2, 0x2b, 0x34, 0x9f, 0xae, 0xa2, 0x98, 0xd2, 0x76,
	0x03, 0x5a, 0x7e, 0xcb, 0xfe, 0x68, 0xf6, 0x36, 0xe8, 0x1d, 0xf2, 0x17, 0x30, 0xbf, 0x4c, 0x0b,
	0xe5, 0x0e, 0xbb, 0x2d, 0x06, 0xea, 0xb6, 0x90, 0x33, 0xe2, 0xde, 0x13, 0xc5, 0x9f, 0xc1, 0xbd,
	0xa8, 0x2a, 0xbd, 0x8f, 0x87, 0x80, 0x22, 0x2b, 0xb2, 0x92, 0xc9, 0x69, 0x3c, 0xeb, 0x31, 0x7f,
	0x04, 0x79, 0x54, 0x0d, 0xba, 0x48, 0x1d, 0x99, 0x1c, 0xc7, 0x0d, 0xba, 0xc8, 0x4b, 0x78, 0xf0,
	0xd3, 0xa3, 0x2a, 0xbd, 0xc3, 0xa0, 0x29, 0x0f, 0x93, 0xf7, 0x6f, 0xac, 0x67, 0xc4, 0xa6, 0xdd,
	0xfb, 0x79, 0xba, 0xbb, 0x11, 0x9d, 0x3e, 0xed, 0x89, 0xf3, 0x9a, 0x97, 0x30, 0xde, 0x6a, 0x6b,
	0x1b, 0x31, 0x2e, 0x4e, 0xca, 0xd9, 0x4b, 0xbe, 0xba, 0xf5, 0x83, 0x64, 0x2f, 0xe0, 0xaf, 0x61,
	0x41, 0x37, 0xde, 0xa8, 0x0e, 0xad, 0xf5, 0x5f, 0x44, 0x4e, 0x8e, 0xd3, 0xd5, 0xed, 0xd7, 0x94,
	0xf3, 0x5e, 0x79, 0x41, 0x42, 0xfe, 0x0a, 0x66, 0x83, 0x73, 0x6b, 0x0f, 0x28, 0x26, 0x7f, 0xf7,
	0x41, 0xaf, 0x5b, 0xdb, 0x03, 0xae, 0xe7, 0x1f, 0x21, 0xfd, 0xf2, 0xcf, 0xa6, 0x31, 0xde, 0xfd,
	0x08, 0x00, 0x00, 0xff, 0xff, 0x7e, 0x69, 0xd6, 0xe8, 0xf2, 0x02, 0x00, 0x00,
}
