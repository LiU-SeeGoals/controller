// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ssl_geometry.proto

package ssl_vision

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SSL_FieldShapeType int32

const (
	SSL_FieldShapeType_Undefined                     SSL_FieldShapeType = 0
	SSL_FieldShapeType_CenterCircle                  SSL_FieldShapeType = 1
	SSL_FieldShapeType_TopTouchLine                  SSL_FieldShapeType = 2
	SSL_FieldShapeType_BottomTouchLine               SSL_FieldShapeType = 3
	SSL_FieldShapeType_LeftGoalLine                  SSL_FieldShapeType = 4
	SSL_FieldShapeType_RightGoalLine                 SSL_FieldShapeType = 5
	SSL_FieldShapeType_HalfwayLine                   SSL_FieldShapeType = 6
	SSL_FieldShapeType_CenterLine                    SSL_FieldShapeType = 7
	SSL_FieldShapeType_LeftPenaltyStretch            SSL_FieldShapeType = 8
	SSL_FieldShapeType_RightPenaltyStretch           SSL_FieldShapeType = 9
	SSL_FieldShapeType_LeftFieldLeftPenaltyStretch   SSL_FieldShapeType = 10
	SSL_FieldShapeType_LeftFieldRightPenaltyStretch  SSL_FieldShapeType = 11
	SSL_FieldShapeType_RightFieldLeftPenaltyStretch  SSL_FieldShapeType = 12
	SSL_FieldShapeType_RightFieldRightPenaltyStretch SSL_FieldShapeType = 13
)

var SSL_FieldShapeType_name = map[int32]string{
	0:  "Undefined",
	1:  "CenterCircle",
	2:  "TopTouchLine",
	3:  "BottomTouchLine",
	4:  "LeftGoalLine",
	5:  "RightGoalLine",
	6:  "HalfwayLine",
	7:  "CenterLine",
	8:  "LeftPenaltyStretch",
	9:  "RightPenaltyStretch",
	10: "LeftFieldLeftPenaltyStretch",
	11: "LeftFieldRightPenaltyStretch",
	12: "RightFieldLeftPenaltyStretch",
	13: "RightFieldRightPenaltyStretch",
}

var SSL_FieldShapeType_value = map[string]int32{
	"Undefined":                     0,
	"CenterCircle":                  1,
	"TopTouchLine":                  2,
	"BottomTouchLine":               3,
	"LeftGoalLine":                  4,
	"RightGoalLine":                 5,
	"HalfwayLine":                   6,
	"CenterLine":                    7,
	"LeftPenaltyStretch":            8,
	"RightPenaltyStretch":           9,
	"LeftFieldLeftPenaltyStretch":   10,
	"LeftFieldRightPenaltyStretch":  11,
	"RightFieldLeftPenaltyStretch":  12,
	"RightFieldRightPenaltyStretch": 13,
}

func (x SSL_FieldShapeType) Enum() *SSL_FieldShapeType {
	p := new(SSL_FieldShapeType)
	*p = x
	return p
}

func (x SSL_FieldShapeType) String() string {
	return proto.EnumName(SSL_FieldShapeType_name, int32(x))
}

func (x *SSL_FieldShapeType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SSL_FieldShapeType_value, data, "SSL_FieldShapeType")
	if err != nil {
		return err
	}
	*x = SSL_FieldShapeType(value)
	return nil
}

func (SSL_FieldShapeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_934439bdf7a0bbeb, []int{0}
}

// A 2D float vector.
type Vector2F struct {
	// X-coordinate in mm
	X *float32 `protobuf:"fixed32,1,req,name=x" json:"x,omitempty"`
	// Y-coordinate in mm
	Y                    *float32 `protobuf:"fixed32,2,req,name=y" json:"y,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Vector2F) Reset()         { *m = Vector2F{} }
func (m *Vector2F) String() string { return proto.CompactTextString(m) }
func (*Vector2F) ProtoMessage()    {}
func (*Vector2F) Descriptor() ([]byte, []int) {
	return fileDescriptor_934439bdf7a0bbeb, []int{0}
}

func (m *Vector2F) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vector2F.Unmarshal(m, b)
}
func (m *Vector2F) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vector2F.Marshal(b, m, deterministic)
}
func (m *Vector2F) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector2F.Merge(m, src)
}
func (m *Vector2F) XXX_Size() int {
	return xxx_messageInfo_Vector2F.Size(m)
}
func (m *Vector2F) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector2F.DiscardUnknown(m)
}

var xxx_messageInfo_Vector2F proto.InternalMessageInfo

func (m *Vector2F) GetX() float32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *Vector2F) GetY() float32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

// Represents a field marking as a line segment represented by a start point p1,
// and end point p2, and a line thickness. The start and end points are along
// the center of the line, so the thickness of the line extends by thickness / 2
// on either side of the line.
type SSL_FieldLineSegment struct {
	// Name of this field marking.
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// Start point of the line segment.
	P1 *Vector2F `protobuf:"bytes,2,req,name=p1" json:"p1,omitempty"`
	// End point of the line segment.
	P2 *Vector2F `protobuf:"bytes,3,req,name=p2" json:"p2,omitempty"`
	// Thickness of the line segment.
	Thickness *float32 `protobuf:"fixed32,4,req,name=thickness" json:"thickness,omitempty"`
	// The type of this shape
	Type                 *SSL_FieldShapeType `protobuf:"varint,5,opt,name=type,enum=SSL_FieldShapeType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SSL_FieldLineSegment) Reset()         { *m = SSL_FieldLineSegment{} }
func (m *SSL_FieldLineSegment) String() string { return proto.CompactTextString(m) }
func (*SSL_FieldLineSegment) ProtoMessage()    {}
func (*SSL_FieldLineSegment) Descriptor() ([]byte, []int) {
	return fileDescriptor_934439bdf7a0bbeb, []int{1}
}

func (m *SSL_FieldLineSegment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SSL_FieldLineSegment.Unmarshal(m, b)
}
func (m *SSL_FieldLineSegment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SSL_FieldLineSegment.Marshal(b, m, deterministic)
}
func (m *SSL_FieldLineSegment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSL_FieldLineSegment.Merge(m, src)
}
func (m *SSL_FieldLineSegment) XXX_Size() int {
	return xxx_messageInfo_SSL_FieldLineSegment.Size(m)
}
func (m *SSL_FieldLineSegment) XXX_DiscardUnknown() {
	xxx_messageInfo_SSL_FieldLineSegment.DiscardUnknown(m)
}

var xxx_messageInfo_SSL_FieldLineSegment proto.InternalMessageInfo

func (m *SSL_FieldLineSegment) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *SSL_FieldLineSegment) GetP1() *Vector2F {
	if m != nil {
		return m.P1
	}
	return nil
}

func (m *SSL_FieldLineSegment) GetP2() *Vector2F {
	if m != nil {
		return m.P2
	}
	return nil
}

func (m *SSL_FieldLineSegment) GetThickness() float32 {
	if m != nil && m.Thickness != nil {
		return *m.Thickness
	}
	return 0
}

func (m *SSL_FieldLineSegment) GetType() SSL_FieldShapeType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return SSL_FieldShapeType_Undefined
}

// Represents a field marking as a circular arc segment represented by center point, a
// start angle, an end angle, and an arc thickness.
type SSL_FieldCircularArc struct {
	// Name of this field marking.
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// Center point of the circular arc.
	Center *Vector2F `protobuf:"bytes,2,req,name=center" json:"center,omitempty"`
	// Radius of the arc.
	Radius *float32 `protobuf:"fixed32,3,req,name=radius" json:"radius,omitempty"`
	// Start angle in counter-clockwise order.
	A1 *float32 `protobuf:"fixed32,4,req,name=a1" json:"a1,omitempty"`
	// End angle in counter-clockwise order.
	A2 *float32 `protobuf:"fixed32,5,req,name=a2" json:"a2,omitempty"`
	// Thickness of the arc.
	Thickness *float32 `protobuf:"fixed32,6,req,name=thickness" json:"thickness,omitempty"`
	// The type of this shape
	Type                 *SSL_FieldShapeType `protobuf:"varint,7,opt,name=type,enum=SSL_FieldShapeType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SSL_FieldCircularArc) Reset()         { *m = SSL_FieldCircularArc{} }
func (m *SSL_FieldCircularArc) String() string { return proto.CompactTextString(m) }
func (*SSL_FieldCircularArc) ProtoMessage()    {}
func (*SSL_FieldCircularArc) Descriptor() ([]byte, []int) {
	return fileDescriptor_934439bdf7a0bbeb, []int{2}
}

func (m *SSL_FieldCircularArc) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SSL_FieldCircularArc.Unmarshal(m, b)
}
func (m *SSL_FieldCircularArc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SSL_FieldCircularArc.Marshal(b, m, deterministic)
}
func (m *SSL_FieldCircularArc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSL_FieldCircularArc.Merge(m, src)
}
func (m *SSL_FieldCircularArc) XXX_Size() int {
	return xxx_messageInfo_SSL_FieldCircularArc.Size(m)
}
func (m *SSL_FieldCircularArc) XXX_DiscardUnknown() {
	xxx_messageInfo_SSL_FieldCircularArc.DiscardUnknown(m)
}

var xxx_messageInfo_SSL_FieldCircularArc proto.InternalMessageInfo

func (m *SSL_FieldCircularArc) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *SSL_FieldCircularArc) GetCenter() *Vector2F {
	if m != nil {
		return m.Center
	}
	return nil
}

func (m *SSL_FieldCircularArc) GetRadius() float32 {
	if m != nil && m.Radius != nil {
		return *m.Radius
	}
	return 0
}

func (m *SSL_FieldCircularArc) GetA1() float32 {
	if m != nil && m.A1 != nil {
		return *m.A1
	}
	return 0
}

func (m *SSL_FieldCircularArc) GetA2() float32 {
	if m != nil && m.A2 != nil {
		return *m.A2
	}
	return 0
}

func (m *SSL_FieldCircularArc) GetThickness() float32 {
	if m != nil && m.Thickness != nil {
		return *m.Thickness
	}
	return 0
}

func (m *SSL_FieldCircularArc) GetType() SSL_FieldShapeType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return SSL_FieldShapeType_Undefined
}

type SSL_GeometryFieldSize struct {
	// Field length (distance between goal lines) in mm
	FieldLength *int32 `protobuf:"varint,1,req,name=field_length,json=fieldLength" json:"field_length,omitempty"`
	// Field width (distance between touch lines) in mm
	FieldWidth *int32 `protobuf:"varint,2,req,name=field_width,json=fieldWidth" json:"field_width,omitempty"`
	// Goal width (distance between inner edges of goal posts) in mm
	GoalWidth *int32 `protobuf:"varint,3,req,name=goal_width,json=goalWidth" json:"goal_width,omitempty"`
	// Goal depth (distance from outer goal line edge to inner goal back) in mm
	GoalDepth *int32 `protobuf:"varint,4,req,name=goal_depth,json=goalDepth" json:"goal_depth,omitempty"`
	// Boundary width (distance from touch/goal line centers to boundary walls) in mm
	BoundaryWidth *int32 `protobuf:"varint,5,req,name=boundary_width,json=boundaryWidth" json:"boundary_width,omitempty"`
	// Generated line segments based on the other parameters
	FieldLines []*SSL_FieldLineSegment `protobuf:"bytes,6,rep,name=field_lines,json=fieldLines" json:"field_lines,omitempty"`
	// Generated circular arcs based on the other parameters
	FieldArcs []*SSL_FieldCircularArc `protobuf:"bytes,7,rep,name=field_arcs,json=fieldArcs" json:"field_arcs,omitempty"`
	// Depth of the penalty/defense area (measured between line centers) in mm
	PenaltyAreaDepth *int32 `protobuf:"varint,8,opt,name=penalty_area_depth,json=penaltyAreaDepth" json:"penalty_area_depth,omitempty"`
	// Width of the penalty/defense area (measured between line centers) in mm
	PenaltyAreaWidth *int32 `protobuf:"varint,9,opt,name=penalty_area_width,json=penaltyAreaWidth" json:"penalty_area_width,omitempty"`
	// Radius of the center circle (measured between line centers) in mm
	CenterCircleRadius *int32 `protobuf:"varint,10,opt,name=center_circle_radius,json=centerCircleRadius" json:"center_circle_radius,omitempty"`
	// Thickness/width of the lines on the field in mm
	LineThickness *int32 `protobuf:"varint,11,opt,name=line_thickness,json=lineThickness" json:"line_thickness,omitempty"`
	// Distance between the goal center and the center of the penalty mark in mm
	GoalCenterToPenaltyMark *int32 `protobuf:"varint,12,opt,name=goal_center_to_penalty_mark,json=goalCenterToPenaltyMark" json:"goal_center_to_penalty_mark,omitempty"`
	// Goal height in mm
	GoalHeight *int32 `protobuf:"varint,13,opt,name=goal_height,json=goalHeight" json:"goal_height,omitempty"`
	// Ball radius in mm (note that this is a float type to represent sub-mm precision)
	BallRadius *float32 `protobuf:"fixed32,14,opt,name=ball_radius,json=ballRadius" json:"ball_radius,omitempty"`
	// Max allowed robot radius in mm (note that this is a float type to represent sub-mm precision)
	MaxRobotRadius       *float32 `protobuf:"fixed32,15,opt,name=max_robot_radius,json=maxRobotRadius" json:"max_robot_radius,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SSL_GeometryFieldSize) Reset()         { *m = SSL_GeometryFieldSize{} }
func (m *SSL_GeometryFieldSize) String() string { return proto.CompactTextString(m) }
func (*SSL_GeometryFieldSize) ProtoMessage()    {}
func (*SSL_GeometryFieldSize) Descriptor() ([]byte, []int) {
	return fileDescriptor_934439bdf7a0bbeb, []int{3}
}

func (m *SSL_GeometryFieldSize) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SSL_GeometryFieldSize.Unmarshal(m, b)
}
func (m *SSL_GeometryFieldSize) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SSL_GeometryFieldSize.Marshal(b, m, deterministic)
}
func (m *SSL_GeometryFieldSize) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSL_GeometryFieldSize.Merge(m, src)
}
func (m *SSL_GeometryFieldSize) XXX_Size() int {
	return xxx_messageInfo_SSL_GeometryFieldSize.Size(m)
}
func (m *SSL_GeometryFieldSize) XXX_DiscardUnknown() {
	xxx_messageInfo_SSL_GeometryFieldSize.DiscardUnknown(m)
}

var xxx_messageInfo_SSL_GeometryFieldSize proto.InternalMessageInfo

func (m *SSL_GeometryFieldSize) GetFieldLength() int32 {
	if m != nil && m.FieldLength != nil {
		return *m.FieldLength
	}
	return 0
}

func (m *SSL_GeometryFieldSize) GetFieldWidth() int32 {
	if m != nil && m.FieldWidth != nil {
		return *m.FieldWidth
	}
	return 0
}

func (m *SSL_GeometryFieldSize) GetGoalWidth() int32 {
	if m != nil && m.GoalWidth != nil {
		return *m.GoalWidth
	}
	return 0
}

func (m *SSL_GeometryFieldSize) GetGoalDepth() int32 {
	if m != nil && m.GoalDepth != nil {
		return *m.GoalDepth
	}
	return 0
}

func (m *SSL_GeometryFieldSize) GetBoundaryWidth() int32 {
	if m != nil && m.BoundaryWidth != nil {
		return *m.BoundaryWidth
	}
	return 0
}

func (m *SSL_GeometryFieldSize) GetFieldLines() []*SSL_FieldLineSegment {
	if m != nil {
		return m.FieldLines
	}
	return nil
}

func (m *SSL_GeometryFieldSize) GetFieldArcs() []*SSL_FieldCircularArc {
	if m != nil {
		return m.FieldArcs
	}
	return nil
}

func (m *SSL_GeometryFieldSize) GetPenaltyAreaDepth() int32 {
	if m != nil && m.PenaltyAreaDepth != nil {
		return *m.PenaltyAreaDepth
	}
	return 0
}

func (m *SSL_GeometryFieldSize) GetPenaltyAreaWidth() int32 {
	if m != nil && m.PenaltyAreaWidth != nil {
		return *m.PenaltyAreaWidth
	}
	return 0
}

func (m *SSL_GeometryFieldSize) GetCenterCircleRadius() int32 {
	if m != nil && m.CenterCircleRadius != nil {
		return *m.CenterCircleRadius
	}
	return 0
}

func (m *SSL_GeometryFieldSize) GetLineThickness() int32 {
	if m != nil && m.LineThickness != nil {
		return *m.LineThickness
	}
	return 0
}

func (m *SSL_GeometryFieldSize) GetGoalCenterToPenaltyMark() int32 {
	if m != nil && m.GoalCenterToPenaltyMark != nil {
		return *m.GoalCenterToPenaltyMark
	}
	return 0
}

func (m *SSL_GeometryFieldSize) GetGoalHeight() int32 {
	if m != nil && m.GoalHeight != nil {
		return *m.GoalHeight
	}
	return 0
}

func (m *SSL_GeometryFieldSize) GetBallRadius() float32 {
	if m != nil && m.BallRadius != nil {
		return *m.BallRadius
	}
	return 0
}

func (m *SSL_GeometryFieldSize) GetMaxRobotRadius() float32 {
	if m != nil && m.MaxRobotRadius != nil {
		return *m.MaxRobotRadius
	}
	return 0
}

type SSL_GeometryCameraCalibration struct {
	CameraId             *uint32  `protobuf:"varint,1,req,name=camera_id,json=cameraId" json:"camera_id,omitempty"`
	FocalLength          *float32 `protobuf:"fixed32,2,req,name=focal_length,json=focalLength" json:"focal_length,omitempty"`
	PrincipalPointX      *float32 `protobuf:"fixed32,3,req,name=principal_point_x,json=principalPointX" json:"principal_point_x,omitempty"`
	PrincipalPointY      *float32 `protobuf:"fixed32,4,req,name=principal_point_y,json=principalPointY" json:"principal_point_y,omitempty"`
	Distortion           *float32 `protobuf:"fixed32,5,req,name=distortion" json:"distortion,omitempty"`
	Q0                   *float32 `protobuf:"fixed32,6,req,name=q0" json:"q0,omitempty"`
	Q1                   *float32 `protobuf:"fixed32,7,req,name=q1" json:"q1,omitempty"`
	Q2                   *float32 `protobuf:"fixed32,8,req,name=q2" json:"q2,omitempty"`
	Q3                   *float32 `protobuf:"fixed32,9,req,name=q3" json:"q3,omitempty"`
	Tx                   *float32 `protobuf:"fixed32,10,req,name=tx" json:"tx,omitempty"`
	Ty                   *float32 `protobuf:"fixed32,11,req,name=ty" json:"ty,omitempty"`
	Tz                   *float32 `protobuf:"fixed32,12,req,name=tz" json:"tz,omitempty"`
	DerivedCameraWorldTx *float32 `protobuf:"fixed32,13,opt,name=derived_camera_world_tx,json=derivedCameraWorldTx" json:"derived_camera_world_tx,omitempty"`
	DerivedCameraWorldTy *float32 `protobuf:"fixed32,14,opt,name=derived_camera_world_ty,json=derivedCameraWorldTy" json:"derived_camera_world_ty,omitempty"`
	DerivedCameraWorldTz *float32 `protobuf:"fixed32,15,opt,name=derived_camera_world_tz,json=derivedCameraWorldTz" json:"derived_camera_world_tz,omitempty"`
	PixelImageWidth      *uint32  `protobuf:"varint,16,opt,name=pixel_image_width,json=pixelImageWidth" json:"pixel_image_width,omitempty"`
	PixelImageHeight     *uint32  `protobuf:"varint,17,opt,name=pixel_image_height,json=pixelImageHeight" json:"pixel_image_height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SSL_GeometryCameraCalibration) Reset()         { *m = SSL_GeometryCameraCalibration{} }
func (m *SSL_GeometryCameraCalibration) String() string { return proto.CompactTextString(m) }
func (*SSL_GeometryCameraCalibration) ProtoMessage()    {}
func (*SSL_GeometryCameraCalibration) Descriptor() ([]byte, []int) {
	return fileDescriptor_934439bdf7a0bbeb, []int{4}
}

func (m *SSL_GeometryCameraCalibration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SSL_GeometryCameraCalibration.Unmarshal(m, b)
}
func (m *SSL_GeometryCameraCalibration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SSL_GeometryCameraCalibration.Marshal(b, m, deterministic)
}
func (m *SSL_GeometryCameraCalibration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSL_GeometryCameraCalibration.Merge(m, src)
}
func (m *SSL_GeometryCameraCalibration) XXX_Size() int {
	return xxx_messageInfo_SSL_GeometryCameraCalibration.Size(m)
}
func (m *SSL_GeometryCameraCalibration) XXX_DiscardUnknown() {
	xxx_messageInfo_SSL_GeometryCameraCalibration.DiscardUnknown(m)
}

var xxx_messageInfo_SSL_GeometryCameraCalibration proto.InternalMessageInfo

func (m *SSL_GeometryCameraCalibration) GetCameraId() uint32 {
	if m != nil && m.CameraId != nil {
		return *m.CameraId
	}
	return 0
}

func (m *SSL_GeometryCameraCalibration) GetFocalLength() float32 {
	if m != nil && m.FocalLength != nil {
		return *m.FocalLength
	}
	return 0
}

func (m *SSL_GeometryCameraCalibration) GetPrincipalPointX() float32 {
	if m != nil && m.PrincipalPointX != nil {
		return *m.PrincipalPointX
	}
	return 0
}

func (m *SSL_GeometryCameraCalibration) GetPrincipalPointY() float32 {
	if m != nil && m.PrincipalPointY != nil {
		return *m.PrincipalPointY
	}
	return 0
}

func (m *SSL_GeometryCameraCalibration) GetDistortion() float32 {
	if m != nil && m.Distortion != nil {
		return *m.Distortion
	}
	return 0
}

func (m *SSL_GeometryCameraCalibration) GetQ0() float32 {
	if m != nil && m.Q0 != nil {
		return *m.Q0
	}
	return 0
}

func (m *SSL_GeometryCameraCalibration) GetQ1() float32 {
	if m != nil && m.Q1 != nil {
		return *m.Q1
	}
	return 0
}

func (m *SSL_GeometryCameraCalibration) GetQ2() float32 {
	if m != nil && m.Q2 != nil {
		return *m.Q2
	}
	return 0
}

func (m *SSL_GeometryCameraCalibration) GetQ3() float32 {
	if m != nil && m.Q3 != nil {
		return *m.Q3
	}
	return 0
}

func (m *SSL_GeometryCameraCalibration) GetTx() float32 {
	if m != nil && m.Tx != nil {
		return *m.Tx
	}
	return 0
}

func (m *SSL_GeometryCameraCalibration) GetTy() float32 {
	if m != nil && m.Ty != nil {
		return *m.Ty
	}
	return 0
}

func (m *SSL_GeometryCameraCalibration) GetTz() float32 {
	if m != nil && m.Tz != nil {
		return *m.Tz
	}
	return 0
}

func (m *SSL_GeometryCameraCalibration) GetDerivedCameraWorldTx() float32 {
	if m != nil && m.DerivedCameraWorldTx != nil {
		return *m.DerivedCameraWorldTx
	}
	return 0
}

func (m *SSL_GeometryCameraCalibration) GetDerivedCameraWorldTy() float32 {
	if m != nil && m.DerivedCameraWorldTy != nil {
		return *m.DerivedCameraWorldTy
	}
	return 0
}

func (m *SSL_GeometryCameraCalibration) GetDerivedCameraWorldTz() float32 {
	if m != nil && m.DerivedCameraWorldTz != nil {
		return *m.DerivedCameraWorldTz
	}
	return 0
}

func (m *SSL_GeometryCameraCalibration) GetPixelImageWidth() uint32 {
	if m != nil && m.PixelImageWidth != nil {
		return *m.PixelImageWidth
	}
	return 0
}

func (m *SSL_GeometryCameraCalibration) GetPixelImageHeight() uint32 {
	if m != nil && m.PixelImageHeight != nil {
		return *m.PixelImageHeight
	}
	return 0
}

// Two-Phase model for straight-kicked balls.
// There are two phases with different accelerations during the ball kicks:
// 1. Sliding
// 2. Rolling
// The full model is described in the TDP of ER-Force from 2016, which can be found here:
// https://ssl.robocup.org/wp-content/uploads/2019/01/2016_ETDP_ER-Force.pdf
type SSL_BallModelStraightTwoPhase struct {
	// Ball sliding acceleration [m/s^2] (should be negative)
	AccSlide *float64 `protobuf:"fixed64,1,req,name=acc_slide,json=accSlide" json:"acc_slide,omitempty"`
	// Ball rolling acceleration [m/s^2] (should be negative)
	AccRoll *float64 `protobuf:"fixed64,2,req,name=acc_roll,json=accRoll" json:"acc_roll,omitempty"`
	// Fraction of the initial velocity where the ball starts to roll
	KSwitch              *float64 `protobuf:"fixed64,3,req,name=k_switch,json=kSwitch" json:"k_switch,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SSL_BallModelStraightTwoPhase) Reset()         { *m = SSL_BallModelStraightTwoPhase{} }
func (m *SSL_BallModelStraightTwoPhase) String() string { return proto.CompactTextString(m) }
func (*SSL_BallModelStraightTwoPhase) ProtoMessage()    {}
func (*SSL_BallModelStraightTwoPhase) Descriptor() ([]byte, []int) {
	return fileDescriptor_934439bdf7a0bbeb, []int{5}
}

func (m *SSL_BallModelStraightTwoPhase) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SSL_BallModelStraightTwoPhase.Unmarshal(m, b)
}
func (m *SSL_BallModelStraightTwoPhase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SSL_BallModelStraightTwoPhase.Marshal(b, m, deterministic)
}
func (m *SSL_BallModelStraightTwoPhase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSL_BallModelStraightTwoPhase.Merge(m, src)
}
func (m *SSL_BallModelStraightTwoPhase) XXX_Size() int {
	return xxx_messageInfo_SSL_BallModelStraightTwoPhase.Size(m)
}
func (m *SSL_BallModelStraightTwoPhase) XXX_DiscardUnknown() {
	xxx_messageInfo_SSL_BallModelStraightTwoPhase.DiscardUnknown(m)
}

var xxx_messageInfo_SSL_BallModelStraightTwoPhase proto.InternalMessageInfo

func (m *SSL_BallModelStraightTwoPhase) GetAccSlide() float64 {
	if m != nil && m.AccSlide != nil {
		return *m.AccSlide
	}
	return 0
}

func (m *SSL_BallModelStraightTwoPhase) GetAccRoll() float64 {
	if m != nil && m.AccRoll != nil {
		return *m.AccRoll
	}
	return 0
}

func (m *SSL_BallModelStraightTwoPhase) GetKSwitch() float64 {
	if m != nil && m.KSwitch != nil {
		return *m.KSwitch
	}
	return 0
}

// Fixed-Loss model for chipped balls.
// Uses fixed damping factors for xy and z direction per hop.
type SSL_BallModelChipFixedLoss struct {
	// Chip kick velocity damping factor in XY direction for the first hop
	DampingXyFirstHop *float64 `protobuf:"fixed64,1,req,name=damping_xy_first_hop,json=dampingXyFirstHop" json:"damping_xy_first_hop,omitempty"`
	// Chip kick velocity damping factor in XY direction for all following hops
	DampingXyOtherHops *float64 `protobuf:"fixed64,2,req,name=damping_xy_other_hops,json=dampingXyOtherHops" json:"damping_xy_other_hops,omitempty"`
	// Chip kick velocity damping factor in Z direction for all hops
	DampingZ             *float64 `protobuf:"fixed64,3,req,name=damping_z,json=dampingZ" json:"damping_z,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SSL_BallModelChipFixedLoss) Reset()         { *m = SSL_BallModelChipFixedLoss{} }
func (m *SSL_BallModelChipFixedLoss) String() string { return proto.CompactTextString(m) }
func (*SSL_BallModelChipFixedLoss) ProtoMessage()    {}
func (*SSL_BallModelChipFixedLoss) Descriptor() ([]byte, []int) {
	return fileDescriptor_934439bdf7a0bbeb, []int{6}
}

func (m *SSL_BallModelChipFixedLoss) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SSL_BallModelChipFixedLoss.Unmarshal(m, b)
}
func (m *SSL_BallModelChipFixedLoss) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SSL_BallModelChipFixedLoss.Marshal(b, m, deterministic)
}
func (m *SSL_BallModelChipFixedLoss) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSL_BallModelChipFixedLoss.Merge(m, src)
}
func (m *SSL_BallModelChipFixedLoss) XXX_Size() int {
	return xxx_messageInfo_SSL_BallModelChipFixedLoss.Size(m)
}
func (m *SSL_BallModelChipFixedLoss) XXX_DiscardUnknown() {
	xxx_messageInfo_SSL_BallModelChipFixedLoss.DiscardUnknown(m)
}

var xxx_messageInfo_SSL_BallModelChipFixedLoss proto.InternalMessageInfo

func (m *SSL_BallModelChipFixedLoss) GetDampingXyFirstHop() float64 {
	if m != nil && m.DampingXyFirstHop != nil {
		return *m.DampingXyFirstHop
	}
	return 0
}

func (m *SSL_BallModelChipFixedLoss) GetDampingXyOtherHops() float64 {
	if m != nil && m.DampingXyOtherHops != nil {
		return *m.DampingXyOtherHops
	}
	return 0
}

func (m *SSL_BallModelChipFixedLoss) GetDampingZ() float64 {
	if m != nil && m.DampingZ != nil {
		return *m.DampingZ
	}
	return 0
}

type SSL_GeometryModels struct {
	StraightTwoPhase     *SSL_BallModelStraightTwoPhase `protobuf:"bytes,1,opt,name=straight_two_phase,json=straightTwoPhase" json:"straight_two_phase,omitempty"`
	ChipFixedLoss        *SSL_BallModelChipFixedLoss    `protobuf:"bytes,2,opt,name=chip_fixed_loss,json=chipFixedLoss" json:"chip_fixed_loss,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *SSL_GeometryModels) Reset()         { *m = SSL_GeometryModels{} }
func (m *SSL_GeometryModels) String() string { return proto.CompactTextString(m) }
func (*SSL_GeometryModels) ProtoMessage()    {}
func (*SSL_GeometryModels) Descriptor() ([]byte, []int) {
	return fileDescriptor_934439bdf7a0bbeb, []int{7}
}

func (m *SSL_GeometryModels) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SSL_GeometryModels.Unmarshal(m, b)
}
func (m *SSL_GeometryModels) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SSL_GeometryModels.Marshal(b, m, deterministic)
}
func (m *SSL_GeometryModels) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSL_GeometryModels.Merge(m, src)
}
func (m *SSL_GeometryModels) XXX_Size() int {
	return xxx_messageInfo_SSL_GeometryModels.Size(m)
}
func (m *SSL_GeometryModels) XXX_DiscardUnknown() {
	xxx_messageInfo_SSL_GeometryModels.DiscardUnknown(m)
}

var xxx_messageInfo_SSL_GeometryModels proto.InternalMessageInfo

func (m *SSL_GeometryModels) GetStraightTwoPhase() *SSL_BallModelStraightTwoPhase {
	if m != nil {
		return m.StraightTwoPhase
	}
	return nil
}

func (m *SSL_GeometryModels) GetChipFixedLoss() *SSL_BallModelChipFixedLoss {
	if m != nil {
		return m.ChipFixedLoss
	}
	return nil
}

type SSL_GeometryData struct {
	Field                *SSL_GeometryFieldSize           `protobuf:"bytes,1,req,name=field" json:"field,omitempty"`
	Calib                []*SSL_GeometryCameraCalibration `protobuf:"bytes,2,rep,name=calib" json:"calib,omitempty"`
	Models               *SSL_GeometryModels              `protobuf:"bytes,3,opt,name=models" json:"models,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *SSL_GeometryData) Reset()         { *m = SSL_GeometryData{} }
func (m *SSL_GeometryData) String() string { return proto.CompactTextString(m) }
func (*SSL_GeometryData) ProtoMessage()    {}
func (*SSL_GeometryData) Descriptor() ([]byte, []int) {
	return fileDescriptor_934439bdf7a0bbeb, []int{8}
}

func (m *SSL_GeometryData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SSL_GeometryData.Unmarshal(m, b)
}
func (m *SSL_GeometryData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SSL_GeometryData.Marshal(b, m, deterministic)
}
func (m *SSL_GeometryData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSL_GeometryData.Merge(m, src)
}
func (m *SSL_GeometryData) XXX_Size() int {
	return xxx_messageInfo_SSL_GeometryData.Size(m)
}
func (m *SSL_GeometryData) XXX_DiscardUnknown() {
	xxx_messageInfo_SSL_GeometryData.DiscardUnknown(m)
}

var xxx_messageInfo_SSL_GeometryData proto.InternalMessageInfo

func (m *SSL_GeometryData) GetField() *SSL_GeometryFieldSize {
	if m != nil {
		return m.Field
	}
	return nil
}

func (m *SSL_GeometryData) GetCalib() []*SSL_GeometryCameraCalibration {
	if m != nil {
		return m.Calib
	}
	return nil
}

func (m *SSL_GeometryData) GetModels() *SSL_GeometryModels {
	if m != nil {
		return m.Models
	}
	return nil
}

func init() {
	proto.RegisterEnum("SSL_FieldShapeType", SSL_FieldShapeType_name, SSL_FieldShapeType_value)
	proto.RegisterType((*Vector2F)(nil), "Vector2f")
	proto.RegisterType((*SSL_FieldLineSegment)(nil), "SSL_FieldLineSegment")
	proto.RegisterType((*SSL_FieldCircularArc)(nil), "SSL_FieldCircularArc")
	proto.RegisterType((*SSL_GeometryFieldSize)(nil), "SSL_GeometryFieldSize")
	proto.RegisterType((*SSL_GeometryCameraCalibration)(nil), "SSL_GeometryCameraCalibration")
	proto.RegisterType((*SSL_BallModelStraightTwoPhase)(nil), "SSL_BallModelStraightTwoPhase")
	proto.RegisterType((*SSL_BallModelChipFixedLoss)(nil), "SSL_BallModelChipFixedLoss")
	proto.RegisterType((*SSL_GeometryModels)(nil), "SSL_GeometryModels")
	proto.RegisterType((*SSL_GeometryData)(nil), "SSL_GeometryData")
}

func init() { proto.RegisterFile("ssl_geometry.proto", fileDescriptor_934439bdf7a0bbeb) }

var fileDescriptor_934439bdf7a0bbeb = []byte{
	// 1211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x56, 0xcd, 0x72, 0xdb, 0xb6,
	0x16, 0xbe, 0xa4, 0x2d, 0x5b, 0x3a, 0xfa, 0xb1, 0x0c, 0x3b, 0x09, 0x73, 0x9d, 0x1f, 0x45, 0x33,
	0xb9, 0x57, 0x93, 0x66, 0xd4, 0x58, 0x49, 0xbb, 0xea, 0x26, 0x51, 0x26, 0x71, 0x66, 0x9c, 0x69,
	0x86, 0x52, 0x9b, 0x34, 0x1b, 0x0c, 0x4c, 0x42, 0x22, 0xc6, 0x14, 0xc1, 0x80, 0x70, 0x2c, 0xfa,
	0x1d, 0xfa, 0x08, 0x5d, 0x75, 0xd1, 0x37, 0xe9, 0xaa, 0x6f, 0xd0, 0x97, 0xe9, 0xe0, 0x00, 0xb2,
	0x15, 0x5b, 0x4e, 0x77, 0xfa, 0x7e, 0x0e, 0x78, 0xce, 0xc1, 0x01, 0x20, 0x20, 0x45, 0x91, 0xd2,
	0x29, 0x97, 0x33, 0xae, 0x55, 0xd9, 0xcf, 0x95, 0xd4, 0xb2, 0xfb, 0x3f, 0xa8, 0xfe, 0xcc, 0x23,
	0x2d, 0xd5, 0x60, 0x42, 0x1a, 0xe0, 0xcd, 0x03, 0xaf, 0xe3, 0xf7, 0xfc, 0xd0, 0x9b, 0x1b, 0x54,
	0x06, 0xbe, 0x45, 0x65, 0xf7, 0x0f, 0x0f, 0x76, 0x47, 0xa3, 0x43, 0xfa, 0x4a, 0xf0, 0x34, 0x3e,
	0x14, 0x19, 0x1f, 0xf1, 0xe9, 0x8c, 0x67, 0x9a, 0x10, 0x58, 0xcf, 0xd8, 0x8c, 0x63, 0x5c, 0x2d,
	0xc4, 0xdf, 0xe4, 0x36, 0xf8, 0xf9, 0x3e, 0xc6, 0xd6, 0x07, 0xb5, 0xfe, 0x62, 0xfd, 0xd0, 0xcf,
	0xf7, 0x51, 0x1a, 0x04, 0x6b, 0x57, 0xa5, 0x01, 0xb9, 0x03, 0x35, 0x9d, 0x88, 0xe8, 0x38, 0xe3,
	0x45, 0x11, 0xac, 0xe3, 0x87, 0x2f, 0x08, 0xf2, 0x7f, 0x58, 0xd7, 0x65, 0xce, 0x83, 0x4a, 0xc7,
	0xeb, 0xb5, 0x06, 0x3b, 0xfd, 0xf3, 0x64, 0x46, 0x09, 0xcb, 0xf9, 0xb8, 0xcc, 0x79, 0x88, 0x86,
	0xee, 0x5f, 0xcb, 0x99, 0x0e, 0x85, 0x8a, 0x4e, 0x52, 0xa6, 0x9e, 0xab, 0x68, 0x65, 0xa6, 0x0f,
	0x60, 0x23, 0xe2, 0x99, 0xe6, 0xea, 0x6a, 0xb6, 0x4e, 0x20, 0x37, 0x61, 0x43, 0xb1, 0x58, 0x9c,
	0x14, 0x98, 0xb5, 0x1f, 0x3a, 0x44, 0x5a, 0xe0, 0xb3, 0x7d, 0x97, 0xa7, 0xcf, 0xf6, 0x11, 0x0f,
	0x82, 0x8a, 0xc3, 0x97, 0xca, 0xd9, 0xb8, 0xae, 0x9c, 0xcd, 0x7f, 0x2b, 0xe7, 0xd7, 0x0a, 0xdc,
	0x30, 0xe2, 0x6b, 0xb7, 0x6f, 0xd6, 0x24, 0xce, 0x4c, 0xee, 0x8d, 0x89, 0x01, 0x34, 0xe5, 0xd9,
	0x54, 0x27, 0x58, 0x57, 0x25, 0xac, 0x23, 0x77, 0x88, 0x14, 0xb9, 0x0f, 0x16, 0xd2, 0x53, 0x11,
	0xeb, 0x04, 0x6b, 0xac, 0x84, 0x80, 0xd4, 0x7b, 0xc3, 0x90, 0xbb, 0x00, 0x53, 0xc9, 0x52, 0xa7,
	0xaf, 0xa1, 0x5e, 0x33, 0xcc, 0x97, 0x72, 0xcc, 0x73, 0x9d, 0x60, 0xad, 0x4e, 0x7e, 0x69, 0x08,
	0xf2, 0x10, 0x5a, 0x47, 0xf2, 0x24, 0x8b, 0x99, 0x2a, 0xdd, 0x0a, 0x15, 0xb4, 0x34, 0x17, 0xac,
	0x5d, 0xe5, 0xfb, 0x45, 0x16, 0xa9, 0xc8, 0xb8, 0xe9, 0xc5, 0x5a, 0xaf, 0x3e, 0xb8, 0xd1, 0x5f,
	0x35, 0x4e, 0x2e, 0x39, 0xc3, 0x14, 0xe4, 0x19, 0x58, 0x44, 0x99, 0x8a, 0x8a, 0x60, 0xf3, 0x72,
	0xd8, 0xd2, 0xde, 0x86, 0x35, 0x34, 0x3e, 0x57, 0x51, 0x41, 0x1e, 0x03, 0xc9, 0x79, 0xc6, 0x52,
	0x5d, 0x52, 0xa6, 0x38, 0x73, 0xb9, 0x57, 0x3b, 0x5e, 0xaf, 0x12, 0xb6, 0x9d, 0xf2, 0x5c, 0x71,
	0x66, 0x4b, 0xb8, 0xec, 0xb6, 0x65, 0xd4, 0xae, 0xb8, 0x6d, 0x25, 0x4f, 0x60, 0xd7, 0x4e, 0x05,
	0x8d, 0x84, 0x8a, 0x52, 0x4e, 0xdd, 0x64, 0x00, 0xfa, 0x89, 0xd5, 0x86, 0x28, 0x85, 0x76, 0x4a,
	0x1e, 0x42, 0xcb, 0x54, 0x4d, 0x2f, 0x46, 0xa1, 0x8e, 0xde, 0xa6, 0x61, 0xc7, 0xe7, 0xe3, 0xf0,
	0x03, 0xec, 0x61, 0xa3, 0xdd, 0xea, 0x5a, 0xd2, 0x45, 0x56, 0x33, 0xa6, 0x8e, 0x83, 0x06, 0xc6,
	0xdc, 0x32, 0x96, 0x21, 0x3a, 0xc6, 0xf2, 0x9d, 0xd5, 0xdf, 0x32, 0x75, 0x6c, 0xb6, 0x19, 0xa3,
	0x13, 0x2e, 0xa6, 0x89, 0x0e, 0x9a, 0xe8, 0xc6, 0x9d, 0x3b, 0x40, 0xc6, 0x18, 0x8e, 0x58, 0x9a,
	0x2e, 0xd2, 0x6d, 0x75, 0xbc, 0x9e, 0x1f, 0x82, 0xa1, 0x5c, 0x9a, 0x3d, 0x68, 0xcf, 0xd8, 0x9c,
	0x2a, 0x79, 0x24, 0xf5, 0xc2, 0xb5, 0x85, 0xae, 0xd6, 0x8c, 0xcd, 0x43, 0x43, 0x5b, 0x67, 0xf7,
	0xcf, 0x75, 0xb8, 0xbb, 0x3c, 0x8f, 0x43, 0x36, 0xe3, 0x8a, 0x0d, 0x59, 0x2a, 0x8e, 0x14, 0xd3,
	0x42, 0x66, 0x64, 0x0f, 0x6a, 0x11, 0x92, 0x54, 0xc4, 0x38, 0x94, 0xcd, 0xb0, 0x6a, 0x89, 0x37,
	0x31, 0x0e, 0xad, 0x8c, 0x58, 0xba, 0x18, 0x5a, 0x7b, 0xc1, 0xd4, 0x91, 0x73, 0x43, 0xfb, 0x08,
	0xb6, 0x73, 0x25, 0xb2, 0x48, 0xe4, 0x2c, 0xa5, 0xb9, 0x14, 0x99, 0xa6, 0x73, 0x77, 0xf6, 0xb6,
	0xce, 0x85, 0x77, 0x86, 0xff, 0xb0, 0xca, 0x5b, 0xba, 0x33, 0x79, 0xc9, 0xfb, 0x0b, 0xb9, 0x07,
	0x10, 0x8b, 0x42, 0x4b, 0x65, 0xb2, 0x74, 0x07, 0x75, 0x89, 0x31, 0x07, 0xf8, 0xd3, 0x13, 0x77,
	0x52, 0xfd, 0x4f, 0x4f, 0x10, 0xef, 0x07, 0x9b, 0x0e, 0xe3, 0x01, 0xff, 0x34, 0x08, 0xaa, 0x0e,
	0x0f, 0x10, 0x3f, 0x0d, 0x6a, 0x0e, 0x3f, 0x35, 0x58, 0xcf, 0x03, 0xb0, 0x58, 0xcf, 0x11, 0x97,
	0x41, 0xdd, 0xe1, 0x12, 0xf1, 0x59, 0xd0, 0x70, 0xf8, 0x8c, 0x7c, 0x07, 0xb7, 0x62, 0xae, 0xc4,
	0x67, 0x1e, 0x53, 0xd7, 0xaf, 0x53, 0xa9, 0xd2, 0x98, 0xea, 0x39, 0xee, 0xa0, 0x1f, 0xee, 0x3a,
	0xd9, 0xb6, 0xf8, 0xbd, 0x11, 0xc7, 0xf3, 0xeb, 0xc3, 0x4a, 0xb7, 0xaf, 0xab, 0xc2, 0xca, 0xeb,
	0xc3, 0xce, 0xdc, 0x46, 0xaf, 0x0a, 0x3b, 0xc3, 0x06, 0x8b, 0x39, 0x4f, 0xa9, 0x98, 0xb1, 0x29,
	0x77, 0xc7, 0xa3, 0xdd, 0xf1, 0x7a, 0xcd, 0x70, 0x0b, 0x85, 0x37, 0x86, 0xb7, 0xa7, 0xc3, 0x9c,
	0xa5, 0x25, 0xaf, 0x9b, 0xc6, 0x6d, 0x34, 0xb7, 0x2f, 0xcc, 0x76, 0x26, 0xbb, 0xca, 0xce, 0xd1,
	0x0b, 0x96, 0xa6, 0x6f, 0x65, 0xcc, 0xd3, 0x91, 0x56, 0xcc, 0x08, 0xe3, 0x53, 0xf9, 0x2e, 0x61,
	0x05, 0x37, 0x73, 0xc4, 0xa2, 0x88, 0x16, 0xa9, 0x88, 0xed, 0xa5, 0xed, 0x85, 0x55, 0x16, 0x45,
	0x23, 0x83, 0xc9, 0x6d, 0x30, 0xbf, 0xa9, 0x92, 0x69, 0x8a, 0x33, 0xe4, 0x85, 0x9b, 0x2c, 0x8a,
	0x42, 0x99, 0xa6, 0x46, 0x3a, 0xa6, 0xc5, 0xa9, 0xd0, 0x91, 0xbd, 0xd1, 0xbc, 0x70, 0xf3, 0x78,
	0x84, 0xb0, 0xfb, 0x9b, 0x07, 0xff, 0xfd, 0xe2, 0xa3, 0xc3, 0x44, 0xe4, 0xaf, 0xc4, 0x9c, 0xc7,
	0x87, 0xb2, 0x28, 0xc8, 0xb7, 0xb0, 0x1b, 0xb3, 0x59, 0x2e, 0xb2, 0x29, 0x9d, 0x97, 0x74, 0x22,
	0x54, 0xa1, 0x69, 0x22, 0x73, 0xf7, 0xf1, 0x6d, 0xa7, 0x7d, 0x28, 0x5f, 0x19, 0xe5, 0x40, 0xe6,
	0x64, 0x1f, 0x6e, 0x2c, 0x05, 0x48, 0x9d, 0x70, 0x65, 0x02, 0x0a, 0x97, 0x12, 0x39, 0x8f, 0xf8,
	0xd1, 0x48, 0x07, 0x32, 0x2f, 0x4c, 0x55, 0x8b, 0x90, 0x33, 0x97, 0x5e, 0xd5, 0x11, 0x1f, 0xcd,
	0x2b, 0x4b, 0x96, 0x0f, 0x17, 0xe6, 0x58, 0x90, 0x43, 0x20, 0x85, 0xeb, 0x0e, 0xd5, 0xa7, 0x92,
	0xe6, 0xa6, 0x3f, 0x81, 0xd7, 0xf1, 0x7a, 0xf5, 0xc1, 0xbd, 0xfe, 0x57, 0xbb, 0x18, 0xb6, 0x8b,
	0xcb, 0x7d, 0x1d, 0xc2, 0x56, 0x94, 0x88, 0x9c, 0x4e, 0x4c, 0xdd, 0x34, 0x95, 0x85, 0x49, 0xd7,
	0x2c, 0xb5, 0xd7, 0xbf, 0xbe, 0x37, 0x61, 0x33, 0x5a, 0x86, 0xdd, 0xdf, 0x3d, 0x68, 0x2f, 0x67,
	0xfa, 0x92, 0x69, 0x46, 0x1e, 0x43, 0x05, 0xef, 0x61, 0x6c, 0x58, 0x7d, 0x70, 0xb3, 0xbf, 0xf2,
	0xe1, 0x0a, 0xad, 0x89, 0x3c, 0x83, 0x4a, 0x64, 0xae, 0x8d, 0xc0, 0xc7, 0x9b, 0xfd, 0x5e, 0xff,
	0xab, 0xd7, 0x4a, 0x68, 0xcd, 0xe4, 0x1b, 0xd8, 0x98, 0x61, 0x57, 0x82, 0x35, 0x4c, 0x7a, 0xa7,
	0x7f, 0xb5, 0x61, 0xa1, 0xb3, 0x3c, 0xfa, 0xdb, 0xb7, 0xfd, 0xfc, 0xf2, 0x65, 0x25, 0x4d, 0xa8,
	0xfd, 0x94, 0xc5, 0x7c, 0x22, 0x32, 0x1e, 0xb7, 0xff, 0x43, 0xda, 0xd0, 0x18, 0x2e, 0xdd, 0xdc,
	0x6d, 0xcf, 0x30, 0x63, 0x99, 0x8f, 0xe5, 0x49, 0x94, 0x98, 0xa7, 0xa8, 0xed, 0x93, 0x1d, 0xd8,
	0x7a, 0x21, 0xb5, 0x96, 0xb3, 0x0b, 0x72, 0xcd, 0xd8, 0x0e, 0xf9, 0x44, 0xbf, 0x96, 0x2c, 0x45,
	0x66, 0x9d, 0x6c, 0x43, 0x33, 0x34, 0xcd, 0x3e, 0xa7, 0x2a, 0x64, 0x0b, 0xea, 0x07, 0x2c, 0x9d,
	0x9c, 0xb2, 0x12, 0x89, 0x0d, 0xd2, 0x02, 0xb0, 0x9f, 0x43, 0xbc, 0x49, 0x6e, 0x02, 0x31, 0xab,
	0xb8, 0x0b, 0x7d, 0xa4, 0x15, 0xd7, 0x51, 0xd2, 0xae, 0x92, 0x5b, 0xb0, 0x83, 0x6b, 0x5d, 0x12,
	0x6a, 0xe4, 0x3e, 0xec, 0x99, 0x00, 0xfb, 0x76, 0x5e, 0x8d, 0x04, 0xd2, 0x81, 0x3b, 0xe7, 0x86,
	0x55, 0x4b, 0xd4, 0x8d, 0x03, 0x85, 0xeb, 0xd6, 0x68, 0x90, 0x07, 0x70, 0xf7, 0xc2, 0xb1, 0x6a,
	0x91, 0xe6, 0x8b, 0xc6, 0x47, 0x30, 0xff, 0x28, 0x3f, 0x8b, 0x42, 0xc8, 0xec, 0x9f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xc7, 0xe4, 0xf0, 0x7c, 0x5e, 0x0a, 0x00, 0x00,
}
